C:\Users\kbj\python\web_project\venv\Lib\site-packages 폴더 설명

이 폴더는 파이썬 가상 환경에 설치된 모든 라이브러리(패키지)가 저장되는 곳입니다.
각 폴더는 pip를 통해 설치된 하나의 파이썬 패키지를 나타냅니다.
아래는 현재 설치된 주요 패키지들과 그 역할에 대한 간략한 설명입니다.

1.  blinker (blinker-1.9.0.dist-info)
	* 역할: 파이썬에서 신호(signals)를 제공하는 라이브러리입니다.
	* 상세 설명: 애플리케이션 내에서 특정 이벤트가 발생했을 때, 해당 이벤트를 구독하는 다른 부분에 알림을 보내는 데 사용됩니다. Flask와 같은 웹 프레임워크에서 내부적으로 사용될 수 있습니다.

2.  click (click-8.2.1.dist-info)
	* 역할: 파이썬에서 강력하고 유연한 명령줄 인터페이스(CLI)를 쉽게 만들 수 있도록 돕는 라이브러리입니다.
	* 상세 설명: Flask CLI(flask.exe)를 포함하여 많은 파이썬 프로젝트에서 명령줄 도구를 구축하는 데 사용됩니다.

3.  colorama (colorama-0.4.6.dist-info)
	* 역할: Windows 터미널에서 ANSI 이스케이프 시퀀스를 사용하여 텍스트 색상 및 스타일을 변경할 수 있도록 돕는 라이브러리입니다.
	* 상세 설명: 주로 명령줄 애플리케이션의 출력을 시각적으로 개선하는 데 사용됩니다. click과 같은 CLI 라이브러리와 함께 사용될 수 있습니다.

4.  flask (flask-3.1.1.dist-info)
	* 역할: 파이썬 웹 개발을 위한 마이크로 웹 프레임워크입니다.
	* 상세 설명: 웹 애플리케이션을 빠르고 쉽게 구축할 수 있도록 라우팅, 요청 처리, 템플릿 렌더링 등의 기능을 제공합니다. 이 프로젝트의 핵심 프레임워크입니다.

5.  itsdangerous (itsdangerous-2.2.0.dist-info)
	* 역할: 데이터를 안전하게 직렬화하고 서명하는 데 사용되는 라이브러리입니다.
	* 상세 설명: Flask에서 세션 관리, 토큰 생성 등 보안 관련 기능에 내부적으로 사용됩니다.

6.  jinja2 (jinja2-3.1.6.dist-info)
	* 역할: 파이썬을 위한 빠르고 표현력이 풍부한 템플릿 엔진입니다.
	* 상세 설명: Flask와 같은 웹 프레임워크에서 HTML 페이지를 동적으로 생성하는 데 사용됩니다. 파이썬 코드에서 데이터를 받아 HTML 템플릿에 삽입하여 최종 웹 페이지를 만듭니다.

7.  markupsafe (MarkupSafe-3.0.2.dist-info)
	* 역할: HTML/XML 마크업을 안전하게 처리하는 데 사용되는 라이브러리입니다.
	* 상세 설명: Jinja2와 함께 사용되어 템플릿 렌더링 시 XSS(크로스 사이트 스크립팅) 공격을 방지하기 위해 자동으로 이스케이프 처리를 수행합니다.

8.  pip (pip-25.1.1.dist-info)
	* 역할: 파이썬 패키지 설치 및 관리를 위한 표준 도구입니다.
	* 상세 설명: 파이썬 패키지 인덱스(PyPI)에서 패키지를 다운로드하고 설치하며, 설치된 패키지를 관리(업데이트, 제거 등)하는 데 사용됩니다.

9.  werkzeug (werkzeug-3.1.3.dist-info)
	* 역할: WSGI(Web Server Gateway Interface) 유틸리티 라이브러리이자 웹 애플리케이션 개발을 위한 도구 모음입니다.
	* 상세 설명: Flask의 기반이 되는 라이브러리 중 하나로, 요청/응답 객체, 라우팅 시스템, 디버거 등 웹 애플리케이션 개발에 필요한 저수준 유틸리티를 제공합니다.

특별 파일: `__init__.py`

*   역할: 이 파일은 해당 디렉토리가 단순한 폴더가 아닌, 파이썬 '패키지'임을 나타내는 매우 중요한 파일입니다.
*   주요 기능:
    1. 패키지 인식: 파이썬은 디렉토리 안에 `__init__.py` 파일이 있어야만 그 디렉토리를 패키지로 인식하고, 다른 코드에서 `import` 할 수 있게 해줍니다.
    2. 임포트 경로 단순화: 패키지 내부의 특정 변수, 함수, 클래스를 `__init__.py`에서 미리 임포트해두면, 패키지 사용자는 더 짧고 간결한 경로로 해당 기능을 가져다 쓸 수 있습니다. (예: `from my_package.module import something` -> `from my_package import something`)
    3. 패키지 초기화: 패키지가 처음 로드될 때 실행되어야 하는 코드(예: 로깅 설정, 설정 파일 로드)를 담을 수 있습니다.
    4. __all__` 변수: `from my_package import *` 구문을 사용할 때, 외부에 공개할 모듈의 목록을 명시적으로 정의하여 패키지의 API를 명확하게 관리할 수 있습니다.
